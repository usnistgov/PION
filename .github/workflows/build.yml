name: build
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  cpp:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          sudo apt-get install --no-install-recommends clang-format-15 libboost-dev libmbedtls-dev ninja-build
          pip install meson
      - uses: actions/checkout@v4
      - name: Check meson.build lists and code style
        run: |
          mk/update-list.sh
          mk/format-code.sh
          git diff --exit-code
      - name: Build CLI programs
        run: |
          meson setup -Dbuildtype=debug -Dwerror=true build
          meson compile -C build
  arduino:
    runs-on: ubuntu-22.04
    steps:
      - uses: arduino/setup-arduino-cli@v1
      - id: cores
        name: Refresh Arduino cores
        run: |
          echo 'https://espressif.github.io/arduino-esp32/package_esp32_index.json' > ~/arduino-cores.txt
          arduino-cli version
          arduino-cli update --additional-urls "$(<~/arduino-cores.txt)"
          echo d=$(sha256sum ~/.arduino15/package_*index.json | sha256sum | cut -d' ' -f1) >> $GITHUB_OUTPUT
      - name: Cache Arduino cores
        uses: actions/cache@v4
        with:
          path: ~/.arduino15/staging/packages
          key: cores-${{ steps.cores.outputs.d }}
      - name: Install Arduino cores
        run: |
          arduino-cli core install esp32:esp32 --additional-urls "$(<~/arduino-cores.txt)"
          arduino-cli lib install NimBLE-Arduino
      - uses: actions/checkout@v4
      - name: Prepare Arduino libraries
        run: |
          mkdir -p "$HOME"/Arduino/libraries
          cd "$HOME"/Arduino/libraries
          ln -s "$GITHUB_WORKSPACE" PION
          mkdir NDNph esp8266ndn
          curl -fsLS "https://github.com/yoursunny/NDNph/archive/${NDNPH_VERSION}.tar.gz" | tar -C NDNph -xz --strip-components=1
          curl -fsLS "https://github.com/yoursunny/esp8266ndn/archive/${ESP8266NDN_VERSION}.tar.gz" | tar -C esp8266ndn -xz --strip-components=1
        env:
          NDNPH_VERSION: 2b5a287285dc369ffda410bed2951a1b101d2cdc
          ESP8266NDN_VERSION: 2dfb2df6168d26daa6d836632596bd4f9cf7d23c
      - name: Compile examples
        run: |
          for F in $(find ./examples -type f -name 'sample.*'); do
            cp -n "${F}" "${F/sample.}"
          done
          for E in $(find ./examples -name '*.ino' -printf '%h\n'); do
            echo "::group::${E##*/}"
            arduino-cli compile -b esp32:esp32:esp32 --warnings more \
              --build-property 'build.partitions=noota_ffat' \
              --build-property 'upload.maximum_size=2097152' \
              "$E"
            echo "::endgroup::"
          done
  node:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        subdir:
          - ./extras/ca
          - ./extras/exp
    defaults:
      run:
        working-directory: ${{ matrix.subdir }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: corepack pnpm install
      - name: Check code style
        run: |
          corepack pnpm lint
          git diff --exit-code
      - run: corepack pnpm typecheck
  go:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        subdir:
          - ./extras/pcapparse
    defaults:
      run:
        working-directory: ${{ matrix.subdir }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ matrix.subdir }}/go.mod
      - run: go install ./cmd/pion-pcapparse
