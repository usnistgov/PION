name: build
on:
  push:
  pull_request:
  workflow_dispatch:
permissions: {}
jobs:
  cpp:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          sudo apt-get install --no-install-recommends clang-format-15 libboost-dev libmbedtls-dev meson
          pip install meson
      - uses: actions/checkout@v4
      - name: Check meson.build lists and code style
        run: |
          mk/update-list.sh
          mk/format-code.sh
          git diff --exit-code
      - name: Build CLI programs
        run: |
          meson setup -Dbuildtype=debug -Dwerror=true build
          meson compile -C build
  arduino:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Copy samples
        run: |
          for F in $(find ./examples -type f -name 'sample.*'); do
            cp -n "${F}" "${F/sample.}"
          done
      - uses: arduino/compile-sketches@v1
        with:
          fqbn: esp32:esp32:esp32wrover:PartitionScheme=noota_ffat
          platforms: |
            - name: esp32:esp32
              version: 2.0.17
          libraries: |
            - source-path: ./
            - name: NimBLE-Arduino
              version: 1.4.1
            - source-url: https://github.com/yoursunny/NDNph.git
              version: 2b5a287285dc369ffda410bed2951a1b101d2cdc
            - source-url: https://github.com/yoursunny/esp8266ndn.git
              version: 2dfb2df6168d26daa6d836632596bd4f9cf7d23c
  node:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        subdir:
          - ./extras/ca
          - ./extras/exp
    defaults:
      run:
        working-directory: ${{ matrix.subdir }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: corepack pnpm install
      - name: Check code style
        run: |
          corepack pnpm lint
          git diff --exit-code
      - run: corepack pnpm typecheck
  go:
    runs-on: ubuntu-22.04
    env:
      CGO_ENABLED: 0
    strategy:
      matrix:
        subdir:
          - ./extras/pcapparse
    defaults:
      run:
        working-directory: ${{ matrix.subdir }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: ${{ matrix.subdir }}/go.mod
      - name: Compile packages
        run: |
          go build -v ./...
      - name: Check code style
        run: |
          go mod tidy
          go fmt ./...
          go vet ./...
          git diff --exit-code
